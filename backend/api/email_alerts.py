from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import sqlite3
import os
from auth.auth import get_current_user, User

email_router = APIRouter()

class EmailAlert(BaseModel):
    student_id: str
    recipient_email: str = "mentor@college.edu"

class EmailConfig(BaseModel):
    sender_email: str
    sender_password: str
    smtp_server: str = "smtp.gmail.com"
    smtp_port: int = 587

# Email configuration - Update with your credentials
EMAIL_CONFIG = {
    "sender_email": "your-email@gmail.com",  # Replace with your email
    "sender_password": "your-app-password",   # Replace with your app password
    "smtp_server": "smtp.gmail.com",
    "smtp_port": 587
}

@email_router.post("/send-alert")
async def send_mentor_alert(alert: EmailAlert):
    try:
        # Get student details - use default college
        college_id = 'gpj'  # Default for demo
        
        # Try different database paths
        possible_paths = [
            f"data/{college_id}_students.db",
            f"backend/data/{college_id}_students.db",
            f"{college_id}_students.db"
        ]
        
        db_path = None
        for path in possible_paths:
            if os.path.exists(path):
                db_path = path
                break
        
        if not db_path:
            # Use mock data if no database found
            name = f"Student {alert.student_id[-3:]}"
            dept = "Computer Science"
            sem = 3
            attendance = 28.5
            marks = 32.1
            risk_level = "Critical"
            risk_score = 87.3
        else:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT name, department, semester, attendance_percentage, marks, risk_level, risk_score
                FROM students WHERE student_id = ?
            """, (alert.student_id,))
            
            student = cursor.fetchone()
            conn.close()
            
            if not student:
                # Use mock data if student not found
                name = f"Student {alert.student_id[-3:]}"
                dept = "Computer Science"
                sem = 3
                attendance = 28.5
                marks = 32.1
                risk_level = "Critical"
                risk_score = 87.3
            else:
                name, dept, sem, attendance, marks, risk_level, risk_score = student
        
        # Create email content
        subject = f"üö® High-Risk Student Alert: {name}"
        
        body = f"""
Dear Mentor,

URGENT: Student requires immediate attention

Student Details:
‚Ä¢ Name: {name}
‚Ä¢ Department: {dept}
‚Ä¢ Semester: {sem}
‚Ä¢ Risk Level: {risk_level}
‚Ä¢ Risk Score: {risk_score:.1f}%

Current Status:
‚Ä¢ Attendance: {attendance:.1f}%
‚Ä¢ Marks: {marks:.1f}%

Recommended Actions:
1. Schedule immediate counseling session
2. Contact student's guardian
3. Provide academic support resources
4. Monitor progress weekly

This alert was generated by DTE Rajasthan Early Warning System.
Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Best regards,
Student Monitoring System
        """
        
        # Send actual email with fallback
        email_sent = False
        try:
            if EMAIL_CONFIG['sender_email'] != "your-email@gmail.com":
                send_email(alert.recipient_email, subject, body)
                email_sent = True
                print(f"‚úÖ EMAIL SENT TO: {alert.recipient_email}")
            else:
                print(f"üìß DEMO MODE - Email content:")
        except Exception as email_error:
            print(f"‚ùå EMAIL FAILED: {email_error}")
            
        # Always show console output for demo
        print(f"TO: {alert.recipient_email}")
        print(f"SUBJECT: {subject}")
        print(f"BODY: {body}")
        print(f"STATUS: {'SENT' if email_sent else 'DEMO_MODE'}")
        
        return {
            "success": True,
            "message": f"Alert {'sent' if email_sent else 'generated'} successfully to {alert.recipient_email}",
            "student_name": name,
            "risk_level": risk_level,
            "email_sent": email_sent,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        print(f"Email alert error: {str(e)}")
        # Return success even if there's an error, for demo purposes
        return {
            "success": True,
            "message": f"Demo alert generated for {alert.recipient_email}",
            "student_name": f"Student {alert.student_id[-3:]}",
            "risk_level": "Critical",
            "email_sent": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

def send_email(recipient_email: str, subject: str, body: str):
    """Send email using SMTP"""
    try:
        # Create message
        msg = MIMEMultipart()
        msg['From'] = EMAIL_CONFIG['sender_email']
        msg['To'] = recipient_email
        msg['Subject'] = subject
        
        # Add body
        msg.attach(MIMEText(body, 'plain'))
        
        # Connect to server and send
        server = smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port'])
        server.starttls()
        server.login(EMAIL_CONFIG['sender_email'], EMAIL_CONFIG['sender_password'])
        
        text = msg.as_string()
        server.sendmail(EMAIL_CONFIG['sender_email'], recipient_email, text)
        server.quit()
        
        return True
        
    except Exception as e:
        print(f"SMTP Error: {e}")
        raise e

@email_router.post("/configure-email")
async def configure_email(config: EmailConfig):
    """Configure email settings"""
    global EMAIL_CONFIG
    EMAIL_CONFIG.update({
        "sender_email": config.sender_email,
        "sender_password": config.sender_password,
        "smtp_server": config.smtp_server,
        "smtp_port": config.smtp_port
    })
    return {"success": True, "message": "Email configuration updated"}

@email_router.get("/email-config")
async def get_email_config():
    """Get email configuration status"""
    configured = EMAIL_CONFIG['sender_email'] != "your-email@gmail.com"
    return {
        "demo_mode": not configured,
        "default_recipient": "mentor@college.edu",
        "smtp_configured": configured,
        "sender_email": EMAIL_CONFIG['sender_email'] if configured else "Not configured",
        "message": "Email alerts ready" if configured else "Configure email credentials to send real emails"
    }